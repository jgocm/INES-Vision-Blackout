
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 18-11-2022 19:10:52
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module Blackout_VisionController
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel capRead: InOut.RawFrame
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	capRead
		|}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_waitFrame|
			              NID_processFrame
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_newFrame, set_newFrame, setL_newFrame, setR_newFrame: RawFrame
			channel get_processedFrame, set_processedFrame, setL_processedFrame, setR_processedFrame: ProcessedFrame
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel capRead__: NIDS.InOut.RawFrame
			channel capRead: InOut.RawFrame
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			waitFrame::enter,
			processFrame::enter
			|}
			
			enteredSS = 	{|
			waitFrame::entered,
			processFrame::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	capRead
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i
			module i
			exports
			
				channel enter, interrupt
				
				D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: waitFrame
			module waitFrame
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: processFrame
			module processFrame
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_newFrame?newFrame -> true & (share__choice(set_processedFrame!process(newFrame) -> SKIP))));SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_newFrame?newFrame -> true & (share__choice(set_processedFrame!process(newFrame) -> SKIP))));SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
			)\sharedVarHide
			
			STM_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; waitFrame::enter -> SKIP))))
					 	 [] dbisim((true)&(capRead__!NID_waitFrame.in?newFrame:{newFrame|newFrame <- RawFrame, true} -> share__choice(set_newFrame!newFrame -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; processFrame::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_processFrame -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; waitFrame::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i::enter,
						waitFrame::enter,
						processFrame::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i,capRead__.NID_waitFrame.in,internal__.NID_processFrame|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i::D__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   [| { share__, terminate } |] (
							   waitFrame::D__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   [| { share__, terminate } |] (
							   processFrame::D__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   )
							   )
							 )
							 [[waitFrame::interrupt <- x__ | x__ <- {|interrupt,capRead__.NID_waitFrame.in|}]]
							 [[processFrame::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_processFrame|}]]
							 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_newFrame |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setR_newFrame
							 			|}) |]
							 ((i::enter -> Transitions(id__,
							 		    const_VisionUpdate_VISION_PROCESSING_TIME))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							  [[set_newFrame <- setR_newFrame]]
							 )
							)
							 [[setR_newFrame <- set_newFrame]]
							)
						)
						 \ hideSet)
						[[
							capRead__.x____ <- capRead
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((MachineBody(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME)\ enteredSS)
				)
			
			IteratedBehaviour(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((MachineBody(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME)\ enteredSS)
				)
			
			Stateful(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				((
					(Behaviour(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour(id__,
										    const_VisionUpdate_VISION_PROCESSING_TIME)
								[| {|get_processedFrame,set_processedFrame,terminate|} |]
								Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
							)\{|get_processedFrame,set_processedFrame|}
						)
						[| {|get_newFrame,set_newFrame,terminate|} |]
						Memory_newFrame((0))
					)\{|get_newFrame,set_newFrame|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i::enter,
						waitFrame::enter,
						processFrame::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i,capRead__.NID_waitFrame.in,internal__.NID_processFrame|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i::VS_O__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   [| { share__, terminate } |] (
							   waitFrame::VS_O__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   [| { share__, terminate } |] (
							   processFrame::VS_O__(id__,
							   		    const_VisionUpdate_VISION_PROCESSING_TIME)
							   )
							   )
							 )
							 [[waitFrame::interrupt <- x__ | x__ <- {|interrupt,capRead__.NID_waitFrame.in|}]]
							 [[processFrame::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_processFrame|}]]
							 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_newFrame |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setR_newFrame
							 			|}) |]
							 ((i::enter -> Transitions(id__,
							 		    const_VisionUpdate_VISION_PROCESSING_TIME))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							  [[set_newFrame <- setR_newFrame]]
							 )
							)
							 [[setR_newFrame <- set_newFrame]]
							)
						)
						 \ hideSet)
						[[
							capRead__.x____ <- capRead
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((MachineBody_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
				)
			
			IteratedBehaviour_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((MachineBody_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
				)
			
			Stateful_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = 
				dbisim((
					(Behaviour_VS_O(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour_VS_O(id__,
										    const_VisionUpdate_VISION_PROCESSING_TIME)
								[| {|get_processedFrame,set_processedFrame,terminate|} |]
								Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
							)\{|get_processedFrame,set_processedFrame|}
						)
						[| {|get_newFrame,set_newFrame,terminate|} |]
						Memory_newFrame((0))
					)\{|get_newFrame,set_newFrame|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_newFrame(newFrame) =
				get_newFrame!newFrame -> Memory_newFrame(newFrame)
				[]
				set_newFrame?x__ -> Memory_newFrame(x__)
				[]
				terminate -> SKIP
			Memory_processedFrame(processedFrame) =
				get_processedFrame!processedFrame -> Memory_processedFrame(processedFrame)
				[]
				set_processedFrame?x__ -> Memory_processedFrame(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = Memory_newFrame((0))
			[| { terminate } |] (
			Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
			)
			
			getsetLocalChannels = {|get_newFrame,set_newFrame,get_processedFrame,set_processedFrame|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = STM_VS_O(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME)
			
			D__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = STM(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) \ internal_events
			O__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = sbisim(diamond(D__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME)))
			VS__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = FVS__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME)
			VS_O__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = sbisim(diamond(FVS__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME)))
			HEXT__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = O__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) [|shared_variable_events|] SKIP
			HUP__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = O__(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__,
					    const_VisionUpdate_VISION_PROCESSING_TIME) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = 	((
					let
						const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
					within 
					stm_ref0::D__(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME)[[
						stm_ref0::terminate <- terminate
					]]
					\ {|
						stm_ref0::capRead
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = 	((
					let
						const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
					within 
					stm_ref0::VS__(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME)[[
						stm_ref0::terminate <- terminate
					]]
					\ {|
						stm_ref0::capRead
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = sbisim(diamond(	((
					let
						const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
					within 
					stm_ref0::O__(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME)[[
						stm_ref0::terminate <- terminate
					]]
					\ {|
						stm_ref0::capRead
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = sbisim(diamond(	((
					let
						const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
					within 
					stm_ref0::VS_O__(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME)[[
						stm_ref0::terminate <- terminate
					]]
					\ {|
						stm_ref0::capRead
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = O__(id__,
					    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) [|shared_variable_events|] SKIP			

	endmodule
