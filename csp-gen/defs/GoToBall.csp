
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 18-11-2022 19:10:52
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module GoToBall
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i|
	              NID_f|
	              NID_SearchBall|
	              NID_DriveToBall|
	              NID_DockBall
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_distance, set_distance, setL_distance, setR_distance: core_real
	channel get_ballPosition, set_ballPosition, setL_ballPosition, setR_ballPosition: Position
	channel get_hasBallContact, set_hasBallContact, setL_hasBallContact, setR_hasBallContact: core_boolean
	channel get_hasBallUpdate, set_hasBallUpdate, setL_hasBallUpdate, setR_hasBallUpdate: Position
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel ballUpdate__: NIDS.InOut.Position
	channel ballUpdate: InOut.Position
	channel ballOnSensor__: NIDS.InOut
	channel ballOnSensor: InOut
	
	-- Declaring call and ret events for undefined operations
	channel stopCall
	channel rotateOnSelfCall: Position
	channel goToPointCall: Position
	channel rotateInPointCall: Position
	
	enterSS = {|
	i::enter,
	f::enter,
	SearchBall::enter,
	DriveToBall::enter,
	DockBall::enter
	|}
	
	enteredSS = 	{|
	f::entered,
	SearchBall::entered,
	DriveToBall::entered,
	DockBall::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	ballUpdate,
		ballOnSensor
	,	stopCall,
		rotateOnSelfCall,
		goToPointCall,
		rotateInPointCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i
	module i
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f
	module f
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: SearchBall
	module SearchBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__rotateOnSelf(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						const_GoToBall_FULL_ROTATION
					);SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__rotateOnSelf(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						const_GoToBall_FULL_ROTATION
					);SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: DriveToBall
	module DriveToBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_hasBallUpdate?hasBallUpdate -> true & (share__choice(set_distance!dist(hasBallUpdate,hasBallUpdate) -> SKIP))));share__choice(get_ballPosition?ballPosition -> true&CALL__goToPoint(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						ballPosition
					));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_hasBallUpdate?hasBallUpdate -> true & (share__choice(set_distance!dist(hasBallUpdate,hasBallUpdate) -> SKIP))));share__choice(get_ballPosition?ballPosition -> true&CALL__goToPoint(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						ballPosition
					));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: DockBall
	module DockBall
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_ballPosition?ballPosition -> true&CALL__goToPoint(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						ballPosition
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_ballPosition?ballPosition -> true&CALL__goToPoint(
						id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION,
						ballPosition
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__stop(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) 	= stopCall -> SKIP
	CALL__rotateOnSelf(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION,
				param_p) 	= rotateOnSelfCall.param_p -> SKIP
	CALL__goToPoint(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION,
				param_p) 	= goToPointCall.param_p -> SKIP
	CALL__rotateInPoint(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION,
				param_p) 	= rotateInPointCall.param_p -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_GoToBall_DOCK_DIST_THRESHOLD,
						    const_GoToBall_TIME_TO_APPROACH_BALL,
						    const_GoToBall_FULL_ROTATION) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_GoToBall_DOCK_DIST_THRESHOLD,
						    const_GoToBall_TIME_TO_APPROACH_BALL,
						    const_GoToBall_FULL_ROTATION) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = ((let
		Trans = share__choice(get_distance?distance -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SearchBall::enter -> SKIP))))
			 	 [] dbisim((true)&(ballUpdate__!NID_SearchBall.in?hasBallUpdate:{hasBallUpdate|hasBallUpdate <- Position, true} -> share__choice(set_hasBallUpdate!hasBallUpdate -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DriveToBall::enter -> SKIP)))
			 	 [] dbisim(((distance<const_GoToBall_DOCK_DIST_THRESHOLD))&(internal__!NID_DriveToBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DockBall::enter -> SKIP)))
			 	 [] dbisim((true)&(ballOnSensor__!NID_DockBall.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__stop(
			 			id__,
			 		    const_GoToBall_DOCK_DIST_THRESHOLD,
			 		    const_GoToBall_TIME_TO_APPROACH_BALL,
			 		    const_GoToBall_FULL_ROTATION
			 		) ; f::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_DockBall -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; SearchBall::enter -> SKIP)))
			 	 [] dbisim((true)&(ballUpdate__!NID_DriveToBall.in?hasBallUpdate:{hasBallUpdate|hasBallUpdate <- Position, true} -> share__choice(set_hasBallUpdate!hasBallUpdate -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DriveToBall::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((
		let
			finalNodesEntered = {|f::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				f::enter,
				SearchBall::enter,
				DriveToBall::enter,
				DockBall::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i,ballUpdate__.NID_SearchBall.in,internal__.NID_DriveToBall,ballOnSensor__.NID_DockBall.in,internal__.NID_DockBall,ballUpdate__.NID_DriveToBall.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::D__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   f::D__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   SearchBall::D__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   DriveToBall::D__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   DockBall::D__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   )
					   )
					   )
					   )
					 )
					 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[SearchBall::interrupt <- x__ | x__ <- {|interrupt,ballUpdate__.NID_SearchBall.in|}]]
					 [[DriveToBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DriveToBall,ballUpdate__.NID_DriveToBall.in|}]]
					 [[DockBall::interrupt <- x__ | x__ <- {|interrupt,ballOnSensor__.NID_DockBall.in,internal__.NID_DockBall|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_hasBallUpdate |} ]] 
					  [[set_distance <- setL_distance]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distance
					 			,setR_hasBallUpdate
					 			|}) |]
					 ((i::enter -> Transitions(id__,
					 		    const_GoToBall_DOCK_DIST_THRESHOLD,
					 		    const_GoToBall_TIME_TO_APPROACH_BALL,
					 		    const_GoToBall_FULL_ROTATION))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distance |} ]]
					  [[set_hasBallUpdate <- setR_hasBallUpdate]]
					 )
					)[[setL_distance <- set_distance]]
					 [[setR_hasBallUpdate <- set_hasBallUpdate]]
					)
				)
				 \ hideSet)
				[[
					ballUpdate__.x____ <- ballUpdate,
					ballOnSensor__.x____ <- ballOnSensor
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((MachineBody(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((MachineBody(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION)\ enteredSS)
		)
	
	Stateful(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		((
			(Behaviour(id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__,
												    const_GoToBall_DOCK_DIST_THRESHOLD,
												    const_GoToBall_TIME_TO_APPROACH_BALL,
												    const_GoToBall_FULL_ROTATION)
										[| {|get_hasBallUpdate,set_hasBallUpdate,terminate|} |]
										Memory_hasBallUpdate(((0,0,0)))
									)\{|get_hasBallUpdate,set_hasBallUpdate|}
								)
								[| {|get_hasBallContact,set_hasBallContact,terminate|} |]
								Memory_hasBallContact(true)
							)\{|get_hasBallContact,set_hasBallContact|}
						)
						[| {|get_ballPosition,set_ballPosition,terminate|} |]
						Memory_ballPosition(((0,0,0)))
					)\{|get_ballPosition,set_ballPosition|}
				)
				[| {|get_distance,set_distance,terminate|} |]
				Memory_distance(0)
			)\{|get_distance,set_distance|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((
		let
			finalNodesEntered = {|f::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				f::enter,
				SearchBall::enter,
				DriveToBall::enter,
				DockBall::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i,ballUpdate__.NID_SearchBall.in,internal__.NID_DriveToBall,ballOnSensor__.NID_DockBall.in,internal__.NID_DockBall,ballUpdate__.NID_DriveToBall.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::VS_O__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   f::VS_O__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   SearchBall::VS_O__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   DriveToBall::VS_O__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   [| { share__, terminate } |] (
					   DockBall::VS_O__(id__,
					   		    const_GoToBall_DOCK_DIST_THRESHOLD,
					   		    const_GoToBall_TIME_TO_APPROACH_BALL,
					   		    const_GoToBall_FULL_ROTATION)
					   )
					   )
					   )
					   )
					 )
					 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[SearchBall::interrupt <- x__ | x__ <- {|interrupt,ballUpdate__.NID_SearchBall.in|}]]
					 [[DriveToBall::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DriveToBall,ballUpdate__.NID_DriveToBall.in|}]]
					 [[DockBall::interrupt <- x__ | x__ <- {|interrupt,ballOnSensor__.NID_DockBall.in,internal__.NID_DockBall|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_hasBallUpdate |} ]] 
					  [[set_distance <- setL_distance]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distance
					 			,setR_hasBallUpdate
					 			|}) |]
					 ((i::enter -> Transitions(id__,
					 		    const_GoToBall_DOCK_DIST_THRESHOLD,
					 		    const_GoToBall_TIME_TO_APPROACH_BALL,
					 		    const_GoToBall_FULL_ROTATION))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distance |} ]]
					  [[set_hasBallUpdate <- setR_hasBallUpdate]]
					 )
					)[[setL_distance <- set_distance]]
					 [[setR_hasBallUpdate <- set_hasBallUpdate]]
					)
				)
				 \ hideSet)
				[[
					ballUpdate__.x____ <- ballUpdate,
					ballOnSensor__.x____ <- ballOnSensor
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((MachineBody_VS_O(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((MachineBody_VS_O(id__,
				    const_GoToBall_DOCK_DIST_THRESHOLD,
				    const_GoToBall_TIME_TO_APPROACH_BALL,
				    const_GoToBall_FULL_ROTATION))
		)
	
	Stateful_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_GoToBall_DOCK_DIST_THRESHOLD,
					    const_GoToBall_TIME_TO_APPROACH_BALL,
					    const_GoToBall_FULL_ROTATION))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__,
												    const_GoToBall_DOCK_DIST_THRESHOLD,
												    const_GoToBall_TIME_TO_APPROACH_BALL,
												    const_GoToBall_FULL_ROTATION)
										[| {|get_hasBallUpdate,set_hasBallUpdate,terminate|} |]
										Memory_hasBallUpdate(((0,0,0)))
									)\{|get_hasBallUpdate,set_hasBallUpdate|}
								)
								[| {|get_hasBallContact,set_hasBallContact,terminate|} |]
								Memory_hasBallContact(true)
							)\{|get_hasBallContact,set_hasBallContact|}
						)
						[| {|get_ballPosition,set_ballPosition,terminate|} |]
						Memory_ballPosition(((0,0,0)))
					)\{|get_ballPosition,set_ballPosition|}
				)
				[| {|get_distance,set_distance,terminate|} |]
				Memory_distance(0)
			)\{|get_distance,set_distance|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_distance(distance) =
		get_distance!distance -> Memory_distance(distance)
		[]
		set_distance?x__ -> Memory_distance(x__)
		[]
		terminate -> SKIP
	Memory_ballPosition(ballPosition) =
		get_ballPosition!ballPosition -> Memory_ballPosition(ballPosition)
		[]
		set_ballPosition?x__ -> Memory_ballPosition(x__)
		[]
		terminate -> SKIP
	Memory_hasBallContact(hasBallContact) =
		get_hasBallContact!hasBallContact -> Memory_hasBallContact(hasBallContact)
		[]
		set_hasBallContact?x__ -> Memory_hasBallContact(x__)
		[]
		terminate -> SKIP
	Memory_hasBallUpdate(hasBallUpdate) =
		get_hasBallUpdate!hasBallUpdate -> Memory_hasBallUpdate(hasBallUpdate)
		[]
		set_hasBallUpdate?x__ -> Memory_hasBallUpdate(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = Memory_distance(0)
	[| { terminate } |] (
	Memory_ballPosition(((0,0,0)))
	[| { terminate } |] (
	Memory_hasBallContact(true)
	[| { terminate } |] (
	Memory_hasBallUpdate(((0,0,0)))
	)
	)
	)
	
	getsetLocalChannels = {|get_distance,set_distance,get_ballPosition,set_ballPosition,get_hasBallContact,set_hasBallContact,get_hasBallUpdate,set_hasBallUpdate|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = STM_VS_O(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION)
	
	D__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = STM(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) \ internal_events
	O__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = sbisim(diamond(D__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION)))
	VS__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = FVS__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION)
	VS_O__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = sbisim(diamond(FVS__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION)))
	HEXT__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = O__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = O__(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_GoToBall_DOCK_DIST_THRESHOLD,
			    const_GoToBall_TIME_TO_APPROACH_BALL,
			    const_GoToBall_FULL_ROTATION) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
