
--
-- RoboChart generator version 3.0.0.202206212138
-- Automatically generated on 18-11-2022 19:10:52
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module Blackout_VisionController
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel capRead: InOut.RawFrame
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	capRead
		|}
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_waitFrame|
			              NID_processFrame
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_newFrame, set_newFrame, setL_newFrame, setR_newFrame: RawFrame
			channel get_processedFrame, set_processedFrame, setL_processedFrame, setR_processedFrame: ProcessedFrame
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel capRead__: NIDS.InOut.RawFrame
			channel capRead: InOut.RawFrame
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			waitFrame::enter,
			processFrame::enter
			|}
			
			enteredSS = 	{|
			waitFrame::entered,
			processFrame::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	capRead
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_processFrame : core_clock_type 
			channel get_CLID_waitFrame : core_clock_type 
			--channel increment__
			
			CLID_processFrame_clock_type(id__,
					          const_VisionUpdate_VISION_PROCESSING_TIME) = 
				let
					max = (clock_type_max(Union({
			({const_VisionUpdate_VISION_PROCESSING_TIME|VISION_PROCESSING_TIME <- core_nat})
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_waitFrame_clock_type(id__,
					          const_VisionUpdate_VISION_PROCESSING_TIME) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = D__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: waitFrame
				module waitFrame
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: processFrame
				module processFrame
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_newFrame?newFrame -> true & (share__choice(set_processedFrame!process(newFrame) -> SKIP))));SHARE_WAIT(1) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_newFrame?newFrame -> true & (share__choice(set_processedFrame!process(newFrame) -> SKIP))));SHARE_WAIT(1) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__,
									    const_VisionUpdate_VISION_PROCESSING_TIME) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__,
									    const_VisionUpdate_VISION_PROCESSING_TIME) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_VisionUpdate_VISION_PROCESSING_TIME))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = ((let
					Trans = share__choice(get_CLID_processFrame?processFrame:CLID_processFrame_clock_type(id__,
							          const_VisionUpdate_VISION_PROCESSING_TIME) -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; waitFrame::enter -> SKIP))))
						 [] dbisim((true)&(capRead__!NID_waitFrame.in?newFrame:{newFrame|newFrame <- RawFrame, true} -> share__choice(set_newFrame!newFrame -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; processFrame::enter -> SKIP)))
						 [] dbisim(((processFrame>const_VisionUpdate_VISION_PROCESSING_TIME))&(internal__!NID_processFrame -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; waitFrame::enter -> SKIP)))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							waitFrame::enter,
							processFrame::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,capRead__.NID_waitFrame.in,internal__.NID_processFrame|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   [| { share__, terminate } |] (
								   waitFrame::D__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   [| { share__, terminate } |] (
								   processFrame::D__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   )
								   )
								 )
								 [[waitFrame::interrupt <- x__ | x__ <- {|interrupt,capRead__.NID_waitFrame.in|}]]
								 [[processFrame::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_processFrame|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_newFrame |} ]] 
								  [[processFrame::entered <- processFrame::enteredL]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,processFrame::enteredL
								 			,setR_newFrame
								 			|}) |]
								 ((i::enter -> Transitions(id__,
								 		    const_VisionUpdate_VISION_PROCESSING_TIME))
								  [[ share__ <- x__ | x__ <- {| share__,processFrame::enteredL |} ]]
								  [[set_newFrame <- setR_newFrame]]
								 )
								)[[processFrame::enteredL <- processFrame::entered]]
								 [[setR_newFrame <- set_newFrame]]
								)
							)
							 \ hideSet)
							[[
								capRead__.x____ <- capRead
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__,
						 		          const_VisionUpdate_VISION_PROCESSING_TIME)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((let
						stateClockSync = {|get_CLID_processFrame,processFrame::entered,get_CLID_waitFrame,waitFrame::entered|}
					 within
						(MachineBody(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((let
						stateClockSync = {|get_CLID_processFrame,processFrame::entered,get_CLID_waitFrame,waitFrame::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__,
												    const_VisionUpdate_VISION_PROCESSING_TIME)
										[| {|get_CLID_waitFrame,waitFrame::entered,terminate|} |]
										dbisim(Clock_CLID_waitFrame(id__,0,
												          const_VisionUpdate_VISION_PROCESSING_TIME))
									)\{|get_CLID_waitFrame|}
								)
								[| {|get_CLID_processFrame,processFrame::entered,terminate|} |]
								dbisim(Clock_CLID_processFrame(id__,0,
										          const_VisionUpdate_VISION_PROCESSING_TIME))
							)\{|get_CLID_processFrame|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					((let
						getsetLocalChannels = {|get_newFrame,set_newFrame,
						get_processedFrame,set_processedFrame|}
						clockSync = {||}
					within
						(Behaviour(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 		    const_VisionUpdate_VISION_PROCESSING_TIME) [| {terminate} |] Clocks(id__,
						 		          const_VisionUpdate_VISION_PROCESSING_TIME))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour(id__,
											    const_VisionUpdate_VISION_PROCESSING_TIME)
									[| {|get_processedFrame,set_processedFrame,terminate|} |]
									Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
								)\{|get_processedFrame,set_processedFrame|}
							)
							[| {|get_newFrame,set_newFrame,terminate|} |]
							Memory_newFrame((0))
						)\{|get_newFrame,set_newFrame|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							waitFrame::enter,
							processFrame::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,capRead__.NID_waitFrame.in,internal__.NID_processFrame|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   [| { share__, terminate } |] (
								   waitFrame::VS_O__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   [| { share__, terminate } |] (
								   processFrame::VS_O__(id__,
								   		    const_VisionUpdate_VISION_PROCESSING_TIME)
								   )
								   )
								 )
								 [[waitFrame::interrupt <- x__ | x__ <- {|interrupt,capRead__.NID_waitFrame.in|}]]
								 [[processFrame::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_processFrame|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_newFrame |} ]] 
								  [[processFrame::entered <- processFrame::enteredL]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,processFrame::enteredL
								 			,setR_newFrame
								 			|}) |]
								 ((i::enter -> Transitions(id__,
								 		    const_VisionUpdate_VISION_PROCESSING_TIME))
								  [[ share__ <- x__ | x__ <- {| share__,processFrame::enteredL |} ]]
								  [[set_newFrame <- setR_newFrame]]
								 )
								)[[processFrame::enteredL <- processFrame::entered]]
								 [[setR_newFrame <- set_newFrame]]
								)
							)
							 \ hideSet)
							[[
								capRead__.x____ <- capRead
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__,
						 		          const_VisionUpdate_VISION_PROCESSING_TIME)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((let
						stateClockSync = {|get_CLID_processFrame,processFrame::entered,get_CLID_waitFrame,waitFrame::entered|}
					 within
						(MachineBody_VS_O(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((let
						stateClockSync = {|get_CLID_processFrame,processFrame::entered,get_CLID_waitFrame,waitFrame::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__,
												    const_VisionUpdate_VISION_PROCESSING_TIME)
										[| {|get_CLID_waitFrame,waitFrame::entered,terminate|} |]
										dbisim(Clock_CLID_waitFrame(id__,0,
												          const_VisionUpdate_VISION_PROCESSING_TIME))
									)\{|get_CLID_waitFrame|}
								)
								[| {|get_CLID_processFrame,processFrame::entered,terminate|} |]
								dbisim(Clock_CLID_processFrame(id__,0,
										          const_VisionUpdate_VISION_PROCESSING_TIME))
							)\{|get_CLID_processFrame|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = 
					dbisim((let
						getsetLocalChannels = {|get_newFrame,set_newFrame,
						get_processedFrame,set_processedFrame|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 		    const_VisionUpdate_VISION_PROCESSING_TIME) [| {terminate} |] Clocks(id__,
						 		          const_VisionUpdate_VISION_PROCESSING_TIME))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour_VS_O(id__,
											    const_VisionUpdate_VISION_PROCESSING_TIME)
									[| {|get_processedFrame,set_processedFrame,terminate|} |]
									Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
								)\{|get_processedFrame,set_processedFrame|}
							)
							[| {|get_newFrame,set_newFrame,terminate|} |]
							Memory_newFrame((0))
						)\{|get_newFrame,set_newFrame|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_newFrame(newFrame) =
					get_newFrame!newFrame -> Memory_newFrame(newFrame)
					[]
					set_newFrame?x__ -> Memory_newFrame(x__)
					[]
					terminate -> SKIP
				Memory_processedFrame(processedFrame) =
					get_processedFrame!processedFrame -> Memory_processedFrame(processedFrame)
					[]
					set_processedFrame?x__ -> Memory_processedFrame(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = Memory_newFrame((0))
				[| { terminate } |] (
				Memory_processedFrame((((((0,0,0))),(((0,0,0))),(((0,0,0))))))
				)
				
				getsetLocalChannels = {|get_newFrame,set_newFrame,get_processedFrame,set_processedFrame|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = STM_VS_O(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) \ localClockResets
				D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = timed_priority(STM(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) \ union(internal_events,localClockResets))
				O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = dbisim(D__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
				VS__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = FVS__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME)
				VS_O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = dbisim(FVS__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME))
				HEXT__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) [|shared_variable_events|] SKIP
				FVS_C__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = dbisim(timed_priority(STM(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) \ internal_events))
				HUP__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = timed_priority(O__(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__,
						          const_VisionUpdate_VISION_PROCESSING_TIME) = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_processFrame(id__,x__,
						          const_VisionUpdate_VISION_PROCESSING_TIME) = 
					TimeOut_1(
						processFrame::entered -> Clock_CLID_processFrame(id__,0,
								          const_VisionUpdate_VISION_PROCESSING_TIME)
						[]
						get_CLID_processFrame!x__ -> Clock_CLID_processFrame(id__,x__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)
						[]
						terminate -> SKIP,Clock_CLID_processFrame(id__,clock_type_plus(x__,1,CLID_processFrame_clock_type(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)),
								          const_VisionUpdate_VISION_PROCESSING_TIME))
				Clock_CLID_waitFrame(id__,x__,
						          const_VisionUpdate_VISION_PROCESSING_TIME) = 
					TimeOut_1(
						waitFrame::entered -> Clock_CLID_waitFrame(id__,0,
								          const_VisionUpdate_VISION_PROCESSING_TIME)
						[]
						get_CLID_waitFrame!x__ -> Clock_CLID_waitFrame(id__,x__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)
						[]
						terminate -> SKIP,Clock_CLID_waitFrame(id__,clock_type_plus(x__,1,CLID_waitFrame_clock_type(id__,
								          const_VisionUpdate_VISION_PROCESSING_TIME)),
								          const_VisionUpdate_VISION_PROCESSING_TIME))
				
				StateClocks(id__,
						          const_VisionUpdate_VISION_PROCESSING_TIME) = dbisim(Clock_CLID_processFrame(id__,0,
						          const_VisionUpdate_VISION_PROCESSING_TIME))
				[| { terminate } |] (
				dbisim(Clock_CLID_waitFrame(id__,0,
						          const_VisionUpdate_VISION_PROCESSING_TIME))
				)
				
				stateClockSync = {|get_CLID_processFrame,processFrame::entered,get_CLID_waitFrame,waitFrame::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_VisionUpdate_VISION_PROCESSING_TIME) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = prioritise(	((
						let
							const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
						within 
						stm_ref0::D__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME)[[
							stm_ref0::terminate <- terminate
						]]
						\ {|
							stm_ref0::capRead
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = prioritise(	((
						let
							const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
						within 
						stm_ref0::VS__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME)[[
							stm_ref0::terminate <- terminate
						]]
						\ {|
							stm_ref0::capRead
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = dbisim(prioritise(	((
						let
							const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
						within 
						stm_ref0::O__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME)[[
							stm_ref0::terminate <- terminate
						]]
						\ {|
							stm_ref0::capRead
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = dbisim(prioritise(	((
						let
							const_VisionUpdate_VISION_PROCESSING_TIME = const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME
						within 
						stm_ref0::VS_O__(id__,
								    const_VisionUpdate_VISION_PROCESSING_TIME)[[
							stm_ref0::terminate <- terminate
						]]
						\ {|
							stm_ref0::capRead
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) = O__(id__,
						    const_Blackout_VisionController_stm_ref0_VISION_PROCESSING_TIME) [|shared_variable_events|] SKIP			
		}

	endmodule
